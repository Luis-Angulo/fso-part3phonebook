{"version":3,"sources":["requests/PersonsAPI.js","components/Search.js","components/NumberForm.js","components/PersonsDisplay.js","components/Notification.js","App.js","index.js"],"names":["baseURL","PersonsAPI","Axios","get","concat","then","res","data","id","newPerson","put","post","delete","Search","_ref","newSSHandler","filterString","react_default","a","createElement","className","type","onChange","value","NumberForm","newNameHandler","newNumberHandler","submitHandler","newName","newNumber","onSubmit","PersonsDisplay","persons","deleteHandler","personElements","filter","person","name","toLowerCase","includes","length","map","key","number","onClick","Notification","content","messageHelper","setMessage","messageObj","setTimeout","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","setNewName","_useState5","_useState6","setNewNumber","_useState7","_useState8","setNewFS","_useState9","_useState10","message","useEffect","personData","catch","replaceNumber","updatedPerson","newPersons","Fragment","src_components_Notification","components_Search","event","target","components_NumberForm","preventDefault","replace","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","window","confirm","err","return","components_PersonsDisplay","newPersonList","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.9bbb2f5d.chunk.js","sourcesContent":["import Axios from 'axios';\r\nconst baseURL = `http://localhost:3001/`\r\n\r\n// An API\r\nconst getAll = () => {\r\n    return Axios.get(`${baseURL}persons`)\r\n    .then(res => res.data)\r\n}\r\n\r\nconst getOne = id => {\r\n    return Axios.get(`${baseURL}persons/${id}`)\r\n    .then(res => res.data)\r\n}\r\n\r\nconst update = (id, newPerson) => {\r\n    return Axios.put(`${baseURL}persons/${id}`, newPerson)\r\n    .then(res => res.data)\r\n}\r\n\r\nconst create = newPerson => {\r\n    return Axios.post(`${baseURL}persons/`, newPerson)\r\n    .then(res => res.data)\r\n}\r\n\r\n// Axios destroy function returns no data, so that return is a bad idea\r\n// This points to a more general problem in designing a wrapper around AJAX libraries\r\n// Which I'm not knowledgeable enough to solve at this time - L.A.\r\nconst destroy = id => {\r\n    return Axios.delete(`${baseURL}persons/${id}`)\r\n    .then(res => res.data)\r\n}\r\n\r\nexport default { getAll, getOne, update, create, destroy }\r\n","import React from \"react\";\r\n\r\n// The search form\r\nconst Search = ({ newSSHandler, filterString }) => {\r\n  return (\r\n    <div className=\"search\">\r\n      <p>filter shown with: </p>\r\n      <input type=\"text\" onChange={newSSHandler} value={filterString} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\n/**\r\n * Form for contacts\r\n */\r\nconst NumberForm = ({\r\n  newNameHandler,\r\n  newNumberHandler,\r\n  submitHandler,\r\n  newName,\r\n  newNumber\r\n}) => {\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div>\r\n        Name: <input type=\"text\" onChange={newNameHandler} value={newName} />\r\n      </div>\r\n      <div>\r\n        Number:{\" \"}\r\n        <input type=\"text\" onChange={newNumberHandler} value={newNumber} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NumberForm;\r\n","import React from \"react\";\r\n\r\n// The phonebook display component\r\nconst PersonsDisplay = ({ persons, filterString, deleteHandler }) => {\r\n  // The search filter\r\n  const filter = person =>\r\n    person.name.toLowerCase().includes(filterString) ||\r\n    filterString.length === 0;\r\n\r\n  const personElements = persons.filter(filter).map(person => (\r\n    <div key={person.id}>\r\n      {person.name} {person.number}\r\n      <button onClick={deleteHandler(person.id)}>Delete</button>\r\n    </div>\r\n  ));\r\n  return (\r\n    <div>\r\n      <h2>Numbers</h2>\r\n      {personElements}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PersonsDisplay;\r\n","import React from \"react\";\r\nimport \"./Notification.css\";\r\n\r\n// A notification box for errors and success messages\r\nconst Notification = ({ type, content }) => {\r\n    // If there's no message, don't render anything\r\n  if (!content) {\r\n    return null;\r\n  }\r\n\r\n  // Render the message. CSS styling is determined by the type attrib\r\n  return (\r\n    <div className={type}>\r\n      <p>{content}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PersonsAPI from \"./requests/PersonsAPI\";\r\nimport Search from \"./components/Search\";\r\nimport NumberForm from \"./components/NumberForm\";\r\nimport PersonsDisplay from \"./components/PersonsDisplay\";\r\nimport Notification from \"./components/Notification\";\r\n\r\n/**\r\n * Helper function for notification logic.\r\n */\r\nconst messageHelper = (setMessage, messageObj) => {\r\n  // It might be worth looking into custom hooks, I have a feeling they cover the \"extract logic\" usecase\r\n  setMessage(messageObj);\r\n  setTimeout(() => setMessage({ type: \"\", content: \"\" }), 3000);\r\n};\r\n\r\n// The \"main\" app\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([]);\r\n  const [newName, setNewName] = useState(\"\"); // state of newname input\r\n  const [newNumber, setNewNumber] = useState(\"\"); // state of newnumber input\r\n  const [filterString, setNewFS] = useState(\"\"); // the search filter string\r\n  const [message, setMessage] = useState({ type: \"\", content: \"\" }); // the error/confirmation message\r\n\r\n  // API call for the phonebook\r\n  useEffect(() => {\r\n    PersonsAPI.getAll()\r\n      .then(personData => setPersons(personData)) // Try to get persons from the API\r\n      .catch(() => {\r\n        // If there's no lambda here, the error message shows even if the request is successful. No idea why\r\n        messageHelper(setMessage, {\r\n          type: \"error\",\r\n          content: \"API connection failed, cannot get contacts from server\"\r\n        });\r\n      }); // If you can't, show an error dialogue\r\n  }, []);\r\n\r\n  // The handler functions for field changes (introducing a new person to the book, new number, searchstring, etc)\r\n  const newNameHandler = event => setNewName(event.target.value);\r\n  const newNumberHandler = event => setNewNumber(event.target.value);\r\n  const newSFHandler = event => setNewFS(event.target.value.toLowerCase());\r\n\r\n  const replaceNumber = newPerson => {\r\n    // Code smell - seems inefficient, but the alternative involved mutating state, what do?\r\n    let updatedPerson = {};\r\n\r\n    const newPersons = persons.map(person => {\r\n      if (person.name === newPerson.name) {\r\n        person.number = newPerson.number;\r\n        updatedPerson = person;\r\n      }\r\n      return person;\r\n    });\r\n    // API call\r\n    PersonsAPI.update(updatedPerson.id, updatedPerson)\r\n      .then(setPersons(newPersons))\r\n      .then(\r\n        messageHelper(setMessage, {\r\n          type: \"success\",\r\n          content: `updated ${updatedPerson.name}'s number to ${\r\n            updatedPerson.number\r\n          }`\r\n        })\r\n      );\r\n  };\r\n\r\n  // handler for the contact form\r\n  const submitHandler = event => {\r\n    event.preventDefault();\r\n    const newPerson = { name: newName, number: newNumber };\r\n    let replace = false;\r\n    for (const person of persons) {\r\n      if (person.name === newPerson.name) {\r\n        replace = window.confirm(\r\n          `${newName} is already added to phonebook. Replace previous phone number?`\r\n        );\r\n        if (replace) {\r\n          replaceNumber(newPerson);\r\n        }\r\n      }\r\n    }\r\n    if (!replace) {\r\n      // Add the new contact to the existing state - to the server\r\n      PersonsAPI.create(newPerson).then(person => {\r\n        setPersons(persons.concat(person)); // Update the local persons state\r\n        setNewName(\"\");\r\n        setNewNumber(\"\");\r\n        messageHelper(setMessage, {\r\n          type: \"success\",\r\n          content: `Added ${newPerson.name} to records`\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // This handles the del button, so it has to curry or trigger constant reloads\r\n  const deleteHandler = id => () => {\r\n    const newPersonList = persons.filter(person => person.id !== id);\r\n    PersonsAPI.destroy(id)\r\n    .then(() => {\r\n      setPersons(newPersonList);\r\n      messageHelper(setMessage, {\r\n        type: \"success\",\r\n        content: `Record deleted`\r\n      });\r\n    })\r\n    .catch(() => {\r\n      setPersons(newPersonList);\r\n      messageHelper(setMessage, {\r\n        type: \"error\",\r\n        content: `Record already deleted on the server. Updating local records...`\r\n      });\r\n    });\r\n  };\r\n\r\n  // App controls the rest of the form components and keeps track of the state\r\n  return (\r\n    <>\r\n      <Notification type={message.type} content={message.content} />\r\n      <h2>Phonebook</h2>\r\n      <Search newSSHandler={newSFHandler} />\r\n      <h2> Add new </h2>\r\n      <NumberForm\r\n        newNameHandler={newNameHandler}\r\n        newNumberHandler={newNumberHandler}\r\n        submitHandler={submitHandler}\r\n        newName={newName}\r\n        newNumber={newNumber}\r\n      />\r\n      <h1>Numbers </h1>\r\n      <PersonsDisplay\r\n        persons={persons}\r\n        filterString={filterString}\r\n        deleteHandler={deleteHandler}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}